{"version":3,"sources":["src/Screens/SignUp.tsx"],"names":["Uname","setUname","bio","setBio","page","setPage","tandc","setTandC","chosenStmnt","setChosenStmnt","db","pages","level","style","styles","tab","card","category","text","autoCompleteType","onChangeText","v","button","onPress","count","questions","left","right","status","disabled","updateScore","score","totalScore","length","buttonGroup","console","log","alignContent","catagory","Math","round","multiLine","checked","onChange","val","collection","doc","auth","currentUser","uid","set","userName","bias","then","checkForUserDbEntry","useState","loaded","setLoaded","getDb","r","behavior","Platform","OS","height","StyleSheet","create","flex","justifyContent","alignItems","position","bottom","width","minHeight","margin","textAlign","backdrop","backgroundColor","marginTop","flexDirection"],"mappings":"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","file":"static/js/9.57d87f6b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, ButtonGroup, Card, Input, Layout, Text, CheckBox, Spinner} from \"@ui-kitten/components\";\r\nimport {KeyboardAvoidingView, Platform, StyleSheet} from \"react-native\";\r\nimport firebase, {auth} from \"firebase\";\r\nimport {checkForUserDbEntry} from \"../App\";\r\nimport {getDb} from \"../firebase\";\r\n\r\nconst pages = [\r\n    userName,\r\n    qu,\r\n    results,\r\n    Bio,]\r\nlet Uname: string, setUname: Function;\r\nlet quiz: string, setQuiz: Function;\r\nlet bio: string, setBio: Function;\r\nlet checked: boolean, setChecked: Function;\r\nlet page: number, setPage: Function;\r\nlet text: String, setText: Function;\r\nlet tandc: boolean, setTandC: Function;\r\nlet chosenStmnt:number, setChosenStmnt:Function\r\n\r\nconst questions = [\r\n    {\r\n        left: \"Social programs and government intervention - focus on equality\",\r\n        right: \"Reduced government spending, free market - focus on freedom\"\r\n    },\r\n    {\r\n        left: \"For affirmative action\",\r\n        right: \"Against affirmative action\"\r\n    },\r\n    {\r\n        left: \"Strengthen environmental protection laws\",\r\n        right: \"Let the free market run it's course\"\r\n    },\r\n    {\r\n        left: \"Allow illegal immigrants paths to citizenship\",\r\n        right: \"Illegal immigrants pose an economical and cultural threat\"\r\n    },\r\n    {\r\n        left: \"For public healthcare \",\r\n        right: \"For private healthcare\"\r\n    },\r\n    {\r\n        left: \"In favor of free access to abortion \",\r\n        right: \"Against abortion rights in general\"\r\n    },\r\n\r\n    {\r\n        left: \"For LGBTQ rights\",\r\n        right: \"Against LGBTQ rights\"\r\n    },\r\n    {\r\n        left: \"In favor gun control\",\r\n        right: \"Against gun control\"\r\n    },\r\n    {\r\n        left: \"For separation of religion and state\",\r\n        right: \"For traditionalism and religious conservatism\"\r\n    },\r\n    {\r\n        left: \"For palestinian independence\",\r\n        right: \"For annexation\"\r\n    },\r\n    {\r\n        left: \"Against new settlements\",\r\n        right: \"For new settlements\"\r\n    },\r\n];\r\n\r\nlet count = 0;\r\nlet totalScore = 0;\r\n\r\n//enter your username\r\nfunction userName() {\r\n    return <Layout level={'2'} style={styles.tab}>\r\n        <Card style={styles.card}>\r\n            <Text category={\"h2\"} style={styles.text}>What should we call\r\n                you?</Text>\r\n            <Text category={\"s1\"} style={styles.text}>This is your public\r\n                username</Text>\r\n            <Input autoCompleteType={\"username\"} onChangeText={(v: string) => setUname(v)}/>\r\n        </Card>\r\n        <Button style={styles.button} onPress={() => setPage(page + 1)}>Next</Button>\r\n\r\n    </Layout>\r\n}\r\n\r\n\r\n//presents the two statements you need to choose from\r\nfunction qu() {\r\n    if (chosenStmnt == 0)\r\n        return <Layout level={'2'} style={styles.tab}>\r\n            <Card>\r\n                <Text style={styles.text}>\r\n                    {count+1}\r\n                </Text>\r\n                <Text category={\"h2\"} style={styles.text}>\r\n                    Select the statement most suited to your worldview\r\n                </Text>\r\n                <Text category={\"s1\"} style={styles.text}>\r\n                    let's detect where you stand on the political spectrum\r\n                </Text>\r\n                <Button onPress={() => setChosenStmnt(-1)}>{questions[count].left}</Button>\r\n                <Button onPress={() => setChosenStmnt(1)}>{questions[count].right}</Button>\r\n            </Card>\r\n            <Button status={\"danger\"} disabled={count<1} style={styles.button} onPress={()=>setPage(page+1)}>Skip</Button>\r\n        </Layout>\r\n\r\n    const updateScore = (score: number) => {\r\n        totalScore += score;\r\n        count++;\r\n        setChosenStmnt(0);\r\n        if (count==questions.length){\r\n            setPage(page+1);\r\n        }\r\n    }\r\n    return <Layout level={'2'} style={styles.tab}>\r\n        <Card>\r\n            <Text style={styles.text}>\r\n                {count + 1}\r\n            </Text>\r\n            <Text category={\"s1\"} style={styles.text}>\r\n                To what extent do you agree with the statement you chose?\r\n            </Text>\r\n\r\n            <ButtonGroup style={styles.buttonGroup}>\r\n                <Button onPress={() => updateScore(chosenStmnt * (0.25))}>I have my doubts</Button>\r\n                <Button onPress={() => updateScore(chosenStmnt * (0.5))}>somewhat agree</Button>\r\n                <Button onPress={() => updateScore(chosenStmnt * (0.75))}>strongly agree</Button>\r\n                <Button onPress={() => updateScore(chosenStmnt * (1))}>completely agree</Button>\r\n            </ButtonGroup>\r\n        </Card>\r\n        {console.log(\"in evaluate\")}\r\n    </Layout>\r\n}\r\n\r\nfunction results() {\r\n    return <Layout level={'2'} style={styles.tab}>\r\n        <Card>\r\n            <Text style={styles.text} category={\"h1\"}>\r\n                Your bias score:\r\n            </Text>\r\n            <Text style={{alignContent:\"center\"}} catagory={\"h4\"}>{Math.round((totalScore / count) * 30)}</Text>\r\n        </Card>\r\n        <Button style={styles.button} onPress={() => setPage(page + 1)}>Next</Button>\r\n    </Layout>\r\n}\r\n\r\n//in charge of submitting everything\r\nfunction Bio() {\r\n    return <Layout level={'2'} style={styles.tab}>\r\n        <Card style={styles.card}>\r\n            {/* in text can do sth called category- tells ur to apply this style */}\r\n            {/* not importinng text from ui  */}\r\n            <Text style={styles.text} category={\"h1\"}>Tell us a bit about yourself</Text>\r\n            <Text style={styles.text} category={\"s1\"}>Your public Bio</Text>\r\n\r\n            <Input style={styles.multiLine} onChangeText={(v: string) => setBio(v)}/>\r\n        </Card>\r\n        {/* button to be green */}\r\n        {/* this returns a js promise once its done it promises fundementslyy return user */}\r\n\r\n\r\n        <CheckBox checked={tandc} onChange={(val: boolean) => {\r\n            setTandC(val)\r\n        }}>I agree to the terms and conditions, as well as Intrey's privacy policy</CheckBox>\r\n\r\n        <Button status={\"success\"} style={styles.button} disabled={!tandc} onPress={() => {\r\n            console.log(Uname, bio)\r\n            db.collection(\"Users\").doc(auth().currentUser?.uid).set({\r\n                userName: Uname,\r\n                bio: bio,\r\n                bias: (totalScore / count) * 30,\r\n            }).then(checkForUserDbEntry);\r\n        }}>Finish</Button>\r\n\r\n    </Layout>\r\n}\r\n\r\n\r\nlet db: firebase.firestore.Firestore;\r\n//mainly initially displayed -adding question by adding new functions\r\nexport default function () {\r\n    const [loaded, setLoaded] = useState(false);\r\n    [page, setPage] = useState(0);\r\n\r\n    [Uname, setUname] = useState(\"\");\r\n    [quiz, setQuiz] = useState(\"\");\r\n    [bio, setBio] = useState(\"\");\r\n    [text, setText] = useState('Press any button');\r\n    [checked, setChecked] = useState(false);\r\n    [tandc, setTandC] = useState(false);\r\n    [chosenStmnt, setChosenStmnt] = useState(0);\r\n\r\n    getDb().then((r) => {\r\n        db = r;\r\n        setLoaded(true)\r\n    });\r\n\r\n\r\n    return (\r\n        // keyboards are buggy to make sure the screen moves up\r\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"} style={{height: \"100%\"}}>\r\n            {loaded ? pages[page]() : <Spinner/>}\r\n        </KeyboardAvoidingView>);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    tab: {\r\n        flex: 1, justifyContent: 'center', alignItems: 'center'\r\n    },\r\n    button: {\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        width: \"100%\"\r\n    },\r\n    multiLine: {\r\n        minHeight: 100,\r\n        width: 300,\r\n    },\r\n    card: {\r\n        justifyContent: 'center', alignItems: 'center',\r\n        minHeight: \"30%\"\r\n    },\r\n    text: {margin: 10, textAlign: \"center\"},\r\n    backdrop: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    },\r\n    buttonGroup: {\r\n        margin: 2,\r\n        marginTop: 4,\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n\r\n    },\r\n\r\n});\r\n"],"sourceRoot":""}