{"version":3,"sources":["src/Screens/DMs.tsx"],"names":["styles","title","setTitle","calls1","calls3","msgConverter","toFirestore","msg","timeStamp","firebase","firestore","FieldValue","serverTimestamp","UID","auth","currentUser","uid","fromFirestore","snapshot","options","data","console","log","foreign","toDate","Chat","route","useState","setMsg","chat","params","name","level","style","flex","ChatMsgs","multiline","onChangeText","value","onPress","Keyboard","dismiss","db","collection","doc","CID","withConverter","add","Date","messages","setMessages","React","useEffect","unsubscribe","orderBy","limitToLast","onSnapshot","dataSnapshot","error","docs","map","msgSnapshot","serverTimestamps","justifyContent","alignItems","renderItem","item","msgContainer","sentByOther","sentByMe","msgText","category","toTimeString","DMs","useStyleSheet","StyleService","create","newChat","position","right","bottom","myChats","myChatsLoading","backgroundColor","maxWidth","borderRadius","alignSelf","margin","padding","width","color","navigationOptions","header","navigation","alignment","accessoryLeft","goBack","icon","props","navigationOptionsMaster","Stack","createStackNavigator","behavior","Platform","OS","height","Navigator","Screen","component","Chats","NewChat","processChat","documentData","a","async","id","get","otherUserData","userName","bio","ref","defined","arg","undefined","chats","setChats","limit","empty","Error","Promise","all","pdata","filter","length","textAlign","description","navigate","ItemSeparatorComponent","Divider","size","showCancel","setShowChancel","called","setCalled","fetch","baseApiUrl","Accept","JSON","getIdToken","token","stringify","method","headers","body","resp","json","r","link","rmvListen","d","newChatLink","update","newChatUID","newChatName","newChatBio","x","disabled"],"mappings":"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","file":"static/js/8.038e4dc3.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Divider,\r\n    Icon,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    ListItem,\r\n    Spinner,\r\n    StyleService,\r\n    Text,\r\n    TopNavigation,\r\n    TopNavigationAction,\r\n    useStyleSheet\r\n} from \"@ui-kitten/components\";\r\nimport {Keyboard, KeyboardAvoidingView, Platform, View} from \"react-native\";\r\nimport {createStackNavigator} from \"@react-navigation/stack\";\r\nimport firebase from \"firebase\";\r\nimport {baseApiUrl, getAuth} from \"../firebase\";\r\nimport {auth, firestore as db} from \"../Components/TabView\";\r\ntype QuerySnapshot = firebase.firestore.QuerySnapshot;\r\ntype DocumentData = firebase.firestore.DocumentData;\r\n\r\nlet calls1 = 0, calls3 = 0;\r\nlet styles: any;\r\n\r\ninterface Message {\r\n    foreign: boolean,\r\n    msg: string,\r\n    timeStamp: Date;\r\n}\r\n\r\nconst msgConverter = {\r\n    toFirestore(msg: Message): firebase.firestore.DocumentData {\r\n        return {\r\n            msg: msg.msg,\r\n            timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            UID: auth.currentUser?.uid\r\n        }\r\n    },\r\n    fromFirestore(snapshot: firebase.firestore.QueryDocumentSnapshot, options: firebase.firestore.SnapshotOptions): Message {\r\n        const data = snapshot.data(options)\r\n        console.log(data)\r\n        return {\r\n            foreign: data.UID != auth.currentUser?.uid,\r\n            msg: data.msg,\r\n            timeStamp: data.timeStamp.toDate(),\r\n        }\r\n    }\r\n}\r\n\r\nfunction Chat({route}: any) {\r\n    const [msg, setMsg] = useState(\"\");\r\n    const chat: Chat = route.params.chat;\r\n    setTitle(chat.name)\r\n    return <Layout level={\"2\"} style={{flex: 1}}>\r\n        <ChatMsgs chat={chat}/>\r\n        <Input multiline={true} onChangeText={setMsg} value={msg}/>\r\n        <Button onPress={() => {\r\n            Keyboard.dismiss();\r\n            db.collection(\"Chats\").doc(chat.CID).collection(\"Messages\").withConverter(msgConverter).add(\r\n                {msg: msg, timeStamp: new Date(), foreign: false}\r\n            )\r\n            setMsg(\"\");\r\n        }\r\n        }>Send</Button>\r\n    </Layout>\r\n}\r\n\r\nfunction ChatMsgs({chat}: { chat: Chat }) {\r\n    const [messages, setMessages] = useState<Message[] | null>(null)\r\n    React.useEffect(() => {\r\n        if (messages == null) {\r\n            const unsubscribe = db.collection(\"Chats\").doc(chat.CID).collection(\"Messages\").orderBy(\"timeStamp\").withConverter(msgConverter).limitToLast(20).onSnapshot((dataSnapshot:QuerySnapshot<Message>) => {\r\n                calls3++;\r\n                if (calls3 > 50) {\r\n                    console.error(\"max call exceeded, quitting\")\r\n                    unsubscribe();\r\n                }\r\n                setMessages(dataSnapshot.docs.map((msgSnapshot) => msgSnapshot.data({serverTimestamps: \"estimate\"})));\r\n            });\r\n            // return unsubscribe;\r\n        }\r\n    }, [messages, setMessages])\r\n\r\n    if (messages == null)\r\n        return <Layout level={\"2\"} style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}><Spinner/></Layout>\r\n\r\n    return (<>\r\n        <Divider/>\r\n        <List data={messages}\r\n              renderItem={({item}: { item: Message }) => (\r\n                  <View style={styles.msgContainer}>\r\n                      <View style={item.foreign ? styles.sentByOther : styles.sentByMe}>\r\n                          <Text style={styles.msgText} category={\"p1\"}>{item.msg}</Text>\r\n                          <Text style={styles.msgText} category={\"s2\"}>{item.timeStamp.toTimeString()}</Text>\r\n\r\n                      </View>\r\n                  </View>\r\n\r\n              )}/>\r\n    </>);\r\n\r\n}\r\n\r\nlet title: string, setTitle: Function;\r\nexport default function DMs() {\r\n    styles = useStyleSheet(StyleService.create({\r\n        newChat: {\r\n            position: \"absolute\",\r\n            right: \"3%\",\r\n            bottom: \"3%\",\r\n        },\r\n\r\n        myChats: {\r\n            flex: 1\r\n        },\r\n\r\n        myChatsLoading: {\r\n            flex: 1,\r\n            justifyContent: 'center', alignItems: 'center'\r\n        },\r\n        sentByMe: {\r\n            backgroundColor: \"color-success-default\",\r\n            maxWidth: \"80%\",\r\n            borderRadius: 5,\r\n            alignSelf: \"flex-end\",\r\n            margin: 10,\r\n            padding: 7,\r\n\r\n        },\r\n        sentByOther: {\r\n            backgroundColor: \"#dcdcdc\",\r\n            maxWidth: \"80%\",\r\n            borderRadius: 5,\r\n            alignSelf: \"flex-start\",\r\n            margin: 10,\r\n            padding: 7,\r\n        },\r\n        msgContainer: {\r\n            width: \"100%\"\r\n        }\r\n        ,\r\n        msgText: {\r\n            color: \"#000\",\r\n            margin: 2\r\n        }\r\n    }));\r\n    [title, setTitle] = useState(\"New Chat\");\r\n    const navigationOptions = {\r\n        header: ({navigation}: any) => {\r\n            return <><TopNavigation title={title} alignment={\"center\"}\r\n                                    accessoryLeft={() => <TopNavigationAction onPress={navigation.goBack}\r\n                                                                              icon={(props:any) => <Icon {...props}\r\n                                                                                                     name={\"arrow-back\"}/>}/>}/>\r\n                <Divider/></>\r\n        }\r\n    }\r\n    const navigationOptionsMaster = {\r\n        header: () => <TopNavigation alignment={\"center\"} title={\"My Chats\"}/>\r\n    }\r\n\r\n    const Stack = createStackNavigator();\r\n    return (\r\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"} style={{height: \"100%\"}}>\r\n\r\n            <Stack.Navigator>\r\n                <Stack.Screen name={\"Chats\"} component={Chats} options={navigationOptionsMaster}/>\r\n                <Stack.Screen name={\"New Chat\"} component={NewChat} options={navigationOptions}/>\r\n                <Stack.Screen name={\"Chat\"} component={Chat} options={navigationOptions}/>\r\n\r\n            </Stack.Navigator>\r\n        </KeyboardAvoidingView>\r\n    )\r\n}\r\n\r\ninterface Chat {\r\n    uid: string,\r\n    name: string,\r\n    bio: string,\r\n    CID: string,\r\n}\r\n\r\nasync function processChat(documentData: any) {\r\n    let otherUserData = (await db.collection(\"Users\").doc(documentData.id).get()).data();\r\n    calls1++;\r\n    if (otherUserData)\r\n        return {\r\n            uid: documentData.id,\r\n            name: otherUserData.userName,\r\n            bio: otherUserData.bio,\r\n            CID: documentData.data().ref,\r\n        }\r\n}\r\n\r\nfunction defined<T>(arg: T | undefined): arg is T {\r\n    return arg !== undefined;\r\n}\r\n\r\nfunction Chats({navigation}: any) {\r\n\r\n    const [chats, setChats] = useState<null | Chat[]>(null);\r\n    useEffect(() => {\r\n        if (chats == null) {\r\n            console.log(\"getting chats\")\r\n            const unsubscribe = db.collection(\"Users\").doc(auth.currentUser?.uid).collection(\"Chats\").limit(10).onSnapshot(\r\n                async (data:QuerySnapshot<DocumentData>) => {\r\n                    console.log(\"GOT CHATS\")\r\n                    calls1 += 1;\r\n                    console.log(calls1, data.empty, data)\r\n                    if (calls1 > 51) {\r\n                        console.error(\"Failed to unsubscribe, panicking\")\r\n                        throw new Error(\"PANIC 1\")\r\n                    }\r\n\r\n                    if (calls1 > 50) {\r\n                        unsubscribe();\r\n                        console.error(\"TO MANNY CALLS TO DB: QUITTING\")\r\n                        return;\r\n                    }\r\n\r\n                    let pdata = (await Promise.all(data.docs.map(processChat)));\r\n\r\n//remove undefined elements\r\n                    setChats(pdata.filter(defined));\r\n\r\n                })\r\n        }\r\n    });\r\n\r\n\r\n    return <Layout level={\"2\"} style={chats == null || chats.length == 0 ? styles.myChatsLoading : styles.myChats}>\r\n        {\r\n            chats == null ? <Spinner/> :\r\n                (chats?.length == 0 ? (<>\r\n                        <Text style={{textAlign: \"center\", margin: 20}} category={\"h2\"}>You don't have any chats\r\n                            yet</Text>\r\n                        <Text category={\"s1\"}>Press on the + button to create some</Text>\r\n                    </>) :\r\n                    (<><Divider/>\r\n                        <List data={chats}\r\n\r\n                              renderItem={({item}: { item: Chat }) => (\r\n                                  <ListItem title={item.name} description={item.bio} onPress={() => {\r\n                                      navigation.navigate(\"Chat\", {chat: item}); //navigate to chat and pass the chat item as a prop\r\n                                  }}/>)} ItemSeparatorComponent={Divider}/></>))}\r\n\r\n\r\n        <Button size={\"large\"} accessoryLeft={(props:any) => (\r\n            <Icon {...props} name='plus-outline'/>\r\n        )} style={styles.newChat} onPress={() => {\r\n            navigation.navigate(\"New Chat\")\r\n        }}/>\r\n    </Layout>\r\n}\r\n\r\n\r\nfunction NewChat({navigation}: any) {\r\n    setTitle(\"New Chat\")\r\n    const [showCancel, setShowChancel] = useState(false);\r\n    const [called, setCalled] = useState(false)\r\n    useEffect(() => {\r\n        if (!called)\r\n            (async () => {\r\n                    setCalled(true);\r\n                    let resp = await fetch(baseApiUrl + `/newChat`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            Accept: 'application/json',\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            token: await auth.currentUser?.getIdToken()\r\n                        })\r\n                    })\r\n                    let r = await resp.json();\r\n                    if (r.link == \"pending\") {\r\n                        setShowChancel(true);\r\n                        let rmvListen = db.collection(\"Users\").doc(auth.currentUser.uid).onSnapshot((d) => {\r\n                            if (d.data().newChatLink != \"pending\") {\r\n                                rmvListen()\r\n                                db.collection(\"Users\").doc(auth.currentUser.uid).update({\r\n                                    newChatLink: \"pending\",\r\n                                    newChatUID: \"pending\",\r\n                                    newChatName: \"pending\"\r\n                                });\r\n                                navigation.navigate(\"Chat\", {\r\n                                    chat:\r\n                                        {\r\n                                            CID: d.data().newChatLink,\r\n                                            uid: d.data().newChatUID,\r\n                                            bio: d.data().newChatBio,\r\n                                            name: d.data().newChatName\r\n                                        }\r\n                                })\r\n                            }\r\n                        });\r\n                    } else {\r\n                        let x: Chat;\r\n                        x = {CID: r.link, uid: r.uid, bio: r.bio, name: r.name}\r\n                        navigation.navigate(\"Chat\", {chat: x})\r\n                    }\r\n                }\r\n            )()\r\n    })\r\n\r\n    return (<Layout level={\"2\"} style={styles.myChatsLoading}>\r\n        <Spinner/>\r\n        <Button disabled={!showCancel} onPress={async () => {\r\n            setShowChancel(false);\r\n            fetch(baseApiUrl + `/cancelChat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    token: await auth.currentUser?.getIdToken()\r\n                })\r\n            });\r\n            navigation.navigate(\"Chats\")\r\n        }}>Cancel</Button>\r\n    </Layout>)\r\n}\r\n"],"sourceRoot":""}